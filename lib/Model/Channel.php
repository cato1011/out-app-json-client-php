<?php
/**
 * Channel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIWIAT Out App - JSON
 *
 * This is a description for the [Out App \"JSON\"](http://siwiat.com/app/view/?appname=json) for the SIWIAT App-Box.  This specification complies with the JSON App version 1.0.3 (Oct 2016)  [Learn more about SIWIAT](http://siwiat.com)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Channel Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Channel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Channel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channelmetaid' => 'int',
        'valueid' => 'string',
        'app' => 'string',
        'deviceid' => 'int',
        'devicecaption' => 'string',
        'channelno' => 'int',
        'interval' => 'int',
        'caption' => 'string',
        'measurementname' => 'string',
        'unitname' => 'string',
        'valuemin' => 'int',
        'valuemax' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'channelmetaid' => 'channelmetaid',
        'valueid' => 'valueid',
        'app' => 'app',
        'deviceid' => 'deviceid',
        'devicecaption' => 'devicecaption',
        'channelno' => 'channelno',
        'interval' => 'interval',
        'caption' => 'caption',
        'measurementname' => 'measurementname',
        'unitname' => 'unitname',
        'valuemin' => 'valuemin',
        'valuemax' => 'valuemax'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'channelmetaid' => 'setChannelmetaid',
        'valueid' => 'setValueid',
        'app' => 'setApp',
        'deviceid' => 'setDeviceid',
        'devicecaption' => 'setDevicecaption',
        'channelno' => 'setChannelno',
        'interval' => 'setInterval',
        'caption' => 'setCaption',
        'measurementname' => 'setMeasurementname',
        'unitname' => 'setUnitname',
        'valuemin' => 'setValuemin',
        'valuemax' => 'setValuemax'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'channelmetaid' => 'getChannelmetaid',
        'valueid' => 'getValueid',
        'app' => 'getApp',
        'deviceid' => 'getDeviceid',
        'devicecaption' => 'getDevicecaption',
        'channelno' => 'getChannelno',
        'interval' => 'getInterval',
        'caption' => 'getCaption',
        'measurementname' => 'getMeasurementname',
        'unitname' => 'getUnitname',
        'valuemin' => 'getValuemin',
        'valuemax' => 'getValuemax'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channelmetaid'] = isset($data['channelmetaid']) ? $data['channelmetaid'] : null;
        $this->container['valueid'] = isset($data['valueid']) ? $data['valueid'] : null;
        $this->container['app'] = isset($data['app']) ? $data['app'] : null;
        $this->container['deviceid'] = isset($data['deviceid']) ? $data['deviceid'] : null;
        $this->container['devicecaption'] = isset($data['devicecaption']) ? $data['devicecaption'] : null;
        $this->container['channelno'] = isset($data['channelno']) ? $data['channelno'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['caption'] = isset($data['caption']) ? $data['caption'] : null;
        $this->container['measurementname'] = isset($data['measurementname']) ? $data['measurementname'] : null;
        $this->container['unitname'] = isset($data['unitname']) ? $data['unitname'] : null;
        $this->container['valuemin'] = isset($data['valuemin']) ? $data['valuemin'] : null;
        $this->container['valuemax'] = isset($data['valuemax']) ? $data['valuemax'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets channelmetaid
     * @return int
     */
    public function getChannelmetaid()
    {
        return $this->container['channelmetaid'];
    }

    /**
     * Sets channelmetaid
     * @param int $channelmetaid
     * @return $this
     */
    public function setChannelmetaid($channelmetaid)
    {
        $this->container['channelmetaid'] = $channelmetaid;

        return $this;
    }

    /**
     * Gets valueid
     * @return string
     */
    public function getValueid()
    {
        return $this->container['valueid'];
    }

    /**
     * Sets valueid
     * @param string $valueid deviceid-channelno
     * @return $this
     */
    public function setValueid($valueid)
    {
        $this->container['valueid'] = $valueid;

        return $this;
    }

    /**
     * Gets app
     * @return string
     */
    public function getApp()
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     * @param string $app
     * @return $this
     */
    public function setApp($app)
    {
        $this->container['app'] = $app;

        return $this;
    }

    /**
     * Gets deviceid
     * @return int
     */
    public function getDeviceid()
    {
        return $this->container['deviceid'];
    }

    /**
     * Sets deviceid
     * @param int $deviceid
     * @return $this
     */
    public function setDeviceid($deviceid)
    {
        $this->container['deviceid'] = $deviceid;

        return $this;
    }

    /**
     * Gets devicecaption
     * @return string
     */
    public function getDevicecaption()
    {
        return $this->container['devicecaption'];
    }

    /**
     * Sets devicecaption
     * @param string $devicecaption
     * @return $this
     */
    public function setDevicecaption($devicecaption)
    {
        $this->container['devicecaption'] = $devicecaption;

        return $this;
    }

    /**
     * Gets channelno
     * @return int
     */
    public function getChannelno()
    {
        return $this->container['channelno'];
    }

    /**
     * Sets channelno
     * @param int $channelno
     * @return $this
     */
    public function setChannelno($channelno)
    {
        $this->container['channelno'] = $channelno;

        return $this;
    }

    /**
     * Gets interval
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     * @param int $interval
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets caption
     * @return string
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     * @param string $caption
     * @return $this
     */
    public function setCaption($caption)
    {
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets measurementname
     * @return string
     */
    public function getMeasurementname()
    {
        return $this->container['measurementname'];
    }

    /**
     * Sets measurementname
     * @param string $measurementname
     * @return $this
     */
    public function setMeasurementname($measurementname)
    {
        $this->container['measurementname'] = $measurementname;

        return $this;
    }

    /**
     * Gets unitname
     * @return string
     */
    public function getUnitname()
    {
        return $this->container['unitname'];
    }

    /**
     * Sets unitname
     * @param string $unitname
     * @return $this
     */
    public function setUnitname($unitname)
    {
        $this->container['unitname'] = $unitname;

        return $this;
    }

    /**
     * Gets valuemin
     * @return int
     */
    public function getValuemin()
    {
        return $this->container['valuemin'];
    }

    /**
     * Sets valuemin
     * @param int $valuemin
     * @return $this
     */
    public function setValuemin($valuemin)
    {
        $this->container['valuemin'] = $valuemin;

        return $this;
    }

    /**
     * Gets valuemax
     * @return int
     */
    public function getValuemax()
    {
        return $this->container['valuemax'];
    }

    /**
     * Sets valuemax
     * @param int $valuemax
     * @return $this
     */
    public function setValuemax($valuemax)
    {
        $this->container['valuemax'] = $valuemax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
